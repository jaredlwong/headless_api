#!/usr/bin/env python
"""Password Resetter

Usage:
    pwdreset ls
    pwdreset ensure <website> <username> <password>
    pwdreset reset  <website> <username> <old-password> <new-password>
    pwdreset (-h | --help)
    pwdreset --version

Commands:
    ls          List all available websites.
    ensure      Ensure your username and password work on a website.
    reset       Reset your username and password on a website.
"""

import base64
import subprocess
import sys
import functools

import docopt

def docopt_cmd(func):
    """Stolen from here:
    https://github.com/docopt/docopt/blob/master/examples/interactive_example.py

    This decorator is used to simplify the try/except block and pass the result
    of the docopt parsing to the called action.
    """
    @functools.wraps(func)
    def fn(args):
        try:
            opt = docopt.docopt(fn.__doc__, argv=args)
        except docopt.DocoptExit as e:
            # The DocoptExit is thrown when the args do not match.
            # We print a message to the user and the usage block.
            print('Invalid Command!')
            print(e)
            return
        except SystemExit:
            # The SystemExit exception prints the usage for --help
            # We do not need to do the print here.
            return
        return func(opt)
    return fn


################################################################################


WEBSITES = [
    'github.com',
    'facebook.com',
    'airbnb.com',
    'reddit.com',
    'news.ycombinator.com',
]


def debug(s):
    print s


@docopt_cmd
def ls(args):
    """Usage: ls"""
    ls_str = ['Available Websites:']
    for website in WEBSITES:
        ls_str.append('\t{}'.format(website))
    return True, '\n'.join(ls_str)


@docopt_cmd
def ensure(args):
    """Usage: ensure <website> <username> <password>"""
    if args['<website>'] not in WEBSITES:
        return False, 'Website <{}> not in list of known websites.'.format(args['<website>'])
    cmd = ['casperjs', 'pwdc.js', 'ensure',
           args['<website>'], args['<username>'], args['<password>']]
    debug(' '.join("'{}'".format(a) for a in cmd))
    output = subprocess.check_output(cmd)
    if 'true' in output:
        return True, 'Username and password successfully verified.'
    else:
        return False, 'Username and password do not match.'


@docopt_cmd
def reset(args):
    """Usage: reset <website> <username> <old-password> <new-password>"""
    ok, msg = ensure('{} {} {}'.format(args['<website>'],
                                       args['<username>'],
                                       args['<old-password>']))
    if not ok:
        return ok, msg
    cmd = ['casperjs', 'pwdc.js', 'reset',
           args['<website>'], args['<username>'],
           args['<old-password>'], args['<new-password>']]
    debug(' '.join("'{}'".format(a) for a in cmd))
    subprocess.check_output(cmd)

    ok, msg = ensure('{} {} {}'.format(args['<website>'],
                                       args['<username>'],
                                       args['<new-password>']))
    if not ok:
        return ok, msg

    return True, 'Password successfully reset.'


if __name__ == '__main__':
    args = docopt.docopt(__doc__, argv=sys.argv[1:], version='0.0', options_first=True)
    if args['ls']:
        ok, msg = ls(sys.argv[2:])
    if args['ensure']:
        ok, msg = ensure(sys.argv[2:])
    if args['reset']:
        ok, msg = reset(sys.argv[2:])
    print msg

